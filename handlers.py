import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException
import config
from database import Database
from keyboards import *
import utils

user_states = {}
user_temp_data = {}

class UserState:
    MAIN = 'main'
    WAITING_FOR_REVIEW_TEXT = 'waiting_for_review_text'
    ADMIN_ADDING_PRODUCT_NAME = 'admin_adding_product_name'
    ADMIN_ADDING_PRODUCT_CATEGORY = 'admin_adding_product_category'
    ADMIN_ADDING_PRODUCT_DESCRIPTION = 'admin_adding_product_description'
    ADMIN_ADDING_PRODUCT_PRICE = 'admin_adding_product_price'
    ADMIN_ADDING_PRODUCT_IMAGE = 'admin_adding_product_image'
    ADMIN_SENDING_BROADCAST = 'admin_sending_broadcast'

def handle_start(bot, message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    db = Database()
    db.add_user(user_id, username, first_name, last_name)
    user_states[user_id] = UserState.MAIN
    
    bot.send_message(
        message.chat.id,
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—É–≤–∏. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ üõç\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùì\n"
        f"‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ üìù\n"
        f"‚Ä¢ –£–∑–Ω–∞—Ç—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üì±\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )

def handle_text(bot, message):
    user_id = message.from_user.id
    text = message.text
    
    if user_id not in user_states:
        user_states[user_id] = UserState.MAIN
    
    state = user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if state == UserState.WAITING_FOR_REVIEW_TEXT:
        handle_review_text(bot, message)
        return
    elif state == UserState.ADMIN_ADDING_PRODUCT_NAME:
        handle_admin_product_name(bot, message)
        return
    elif state == UserState.ADMIN_ADDING_PRODUCT_CATEGORY:
        handle_admin_product_category(bot, message)
        return
    elif state == UserState.ADMIN_ADDING_PRODUCT_DESCRIPTION:
        handle_admin_product_description(bot, message)
        return
    elif state == UserState.ADMIN_ADDING_PRODUCT_PRICE:
        handle_admin_product_price(bot, message)
        return
    elif state == UserState.ADMIN_ADDING_PRODUCT_IMAGE:
        handle_admin_product_image(bot, message)
        return
    elif state == UserState.ADMIN_SENDING_BROADCAST:
        handle_admin_broadcast(bot, message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É–≤–∏:",
            reply_markup=categories_keyboard()
        )
    elif text == '‚ùì FAQ':
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
            reply_markup=faq_keyboard()
        )
    elif text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        bot.send_message(
            message.chat.id,
            "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –æ—Ç 1 –¥–æ 5, –≥–¥–µ 5 - –æ—Ç–ª–∏—á–Ω–æ(–ó–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –∫–∞—Å—Å–µ):",
            reply_markup=review_rating_keyboard()
        )
    elif text == 'üì± –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã':
        bot.send_message(
            message.chat.id,
            "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:",
            reply_markup=contacts_keyboard()
        )
    elif text == 'üîç –û –Ω–∞—Å':
        bot.send_message(
            message.chat.id,
            "–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–∏ —Å —à–∏—Ä–æ–∫–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. "
            "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏ —Å—Ç–∏–ª—å–Ω—É—é –æ–±—É–≤—å –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. "
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã."
        )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and user_id in config.ADMIN_IDS:
        handle_admin_stats(bot, message)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' and user_id in config.ADMIN_IDS:
        start_adding_product(bot, message)
    elif text == 'üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤' and user_id in config.ADMIN_IDS:
        handle_admin_reviews(bot, message)
    elif text == 'üì® –†–∞—Å—Å—ã–ª–∫–∞' and user_id in config.ADMIN_IDS:
        start_broadcast(bot, message)
    elif text == '‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏' and user_id in config.ADMIN_IDS:
        user_states[user_id] = UserState.MAIN
        bot.send_message(
            message.chat.id,
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=main_menu_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=main_menu_keyboard()
        )


def handle_callback(bot, call):
    user_id = call.from_user.id
    db = Database()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    if call.data == 'back_to_category':
        try:
            # Try to edit the message text
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É–≤–∏:",
                reply_markup=categories_keyboard()
            )
        except telebot.apihelper.ApiTelegramException as e:
            # If editing fails (e.g., message has no text), delete the message and send a new one
            if "there is no text in the message to edit" in str(e):
                bot.delete_message(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
                bot.send_message(
                    call.message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É–≤–∏:",
                    reply_markup=categories_keyboard()
                )
            else:
                # Re-raise other exceptions
                raise
        
        bot.answer_callback_query(call.id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif call.data == 'back_to_main':
        bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu_keyboard()
        )
        bot.answer_callback_query(call.id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤
    elif call.data.startswith('faq_'):
        faq_index = int(call.data.split('_')[1])
        questions = list(config.FAQ.keys())
        answers = list(config.FAQ.values())
        
        if faq_index < len(questions):
            question = questions[faq_index]
            answer = answers[faq_index]
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"*{question}*\n\n{answer}",
                parse_mode='Markdown',
                reply_markup=faq_keyboard()
            )
        bot.answer_callback_query(call.id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞
    elif call.data.startswith('rating_'):
        rating = int(call.data.split('_')[1])
        user_temp_data[user_id] = {'rating': rating}
        user_states[user_id] = UserState.WAITING_FOR_REVIEW_TEXT
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞:"
        )
        bot.answer_callback_query(call.id)
        return
    
    # –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_callback –¥–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫:
    elif call.data == 'show_addresses':
        addresses_text = (
            "üìç <b>–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:</b>\n\n"
            "üè¢ <b>Shoes Club</b>\n"
            "–ê–¥—Ä–µ—Å: –ø—Ä–æ—Å–ø. –ü–æ–±–µ–¥—ã, 31, –ü–µ–Ω–∑–∞\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 09:00-19:00\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +703-723\n\n"
            
            "üè¢ <b>Shoes Club</b>\n"
            "–ê–¥—Ä–µ—Å: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è —É–ª., 12, –ü–µ–Ω–∑–∞\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 09:00-19:00\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +703-723\n\n"
            
            "üè¢ <b>Shoes Club</b>\n"
            "–ê–¥—Ä–µ—Å: —É–ª. –ë–∞–∫—É–Ω–∏–Ω–∞, 27, –ü–µ–Ω–∑–∞\n"
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 09:00-19:00\n"
            "–¢–µ–ª–µ—Ñ–æ–Ω: +703-723"
        )
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton('üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url="https://yandex.ru/maps/49/penza/chain/shoes_club/11446545906/filter/chain_id/11446545906/?ll=45.030536%2C53.200042&sctx=ZAAAAAgBEAAaKAoSCU1KQbeXfkZAEe%2Bs3Xahm0pAEhIJ7ginBS%2F6oj8RLJs5JLVQkj8iBgABAgMEBSgAOABA1Z8NSAFqAnJ1ggEUY2hhaW5faWQ6MTE0NDY1NDU5MDadAc3MzD2gAQCoAQC9AVF97dTCARGSuofAygO%2F%2F9WK%2BgbcpOCtBIICFGNoYWluX2lkOjExNDQ2NTQ1OTA2igIAkgIAmgIMZGVza3RvcC1tYXBzqgJkMTE0NDY1NDU5MDYsMjA3NDU2NTM5NTIsNDE5NTA3OTkwNiw2MDAzNzA0LDkwNDE0ODcxMjIsODA1NTUwOTM3LDE4ODk1MzkyNzY5NCw2MDAyMTAzLDYwMDM3MTksNjAwMzYzM7ACAQ%3D%3D&sll=45.030536%2C53.200042&sspn=0.246506%2C0.084524&utm_content=add_review&utm_medium=reviews&utm_source=maps-reviews-widget&z=13")
        )
        keyboard.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='show_contacts'))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=addresses_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        bot.answer_callback_query(call.id)
        return
    
    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º:
    elif call.data == 'show_contacts':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:",
            reply_markup=contacts_keyboard()
        )
        bot.answer_callback_query(call.id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call.data.startswith('category_'):
        category = call.data.replace('category_', '')
        products = db.get_products_by_category(category)
        
        if not products:
            bot.answer_callback_query(call.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        user_temp_data[user_id] = {'current_category': category}
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='back_to_category')
            )
        )
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for product in products:
            product_id, name, _, description, price, image_url, _ = product
            caption = f"<b>{name}</b>\n\n{description}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
            
            if image_url:
                bot.send_photo(
                    call.message.chat.id,
                    image_url,
                    caption=caption,
                    parse_mode='HTML',
                    reply_markup=product_keyboard(product_id)
                )
            else:
                bot.send_message(
                    call.message.chat.id,
                    caption,
                    parse_mode='HTML',
                    reply_markup=product_keyboard(product_id)
                )
    
    # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback
    bot.answer_callback_query(call.id)



def handle_review_text(bot, message):
    user_id = message.from_user.id
    text = message.text
    db = Database()
    
    if user_id not in user_temp_data or 'rating' not in user_temp_data[user_id]:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_keyboard()
        )
        user_states[user_id] = UserState.MAIN
        return
    
    rating = user_temp_data[user_id]['rating']
    db.add_review(user_id, rating, text)
    
    user_states[user_id] = UserState.MAIN
    
    if rating >= 4:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! –ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. "
            "–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å–µ:",
            reply_markup=positive_review_keyboard()
        )
    else:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤. –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. "
            "–ú—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –º–∞–≥–∞–∑–∏–Ω–∞:",
            reply_markup=negative_review_keyboard()
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
def handle_admin_command(bot, message):
    user_id = message.from_user.id
    
    if user_id not in config.ADMIN_IDS:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ."
        )
        return
    
    bot.send_message(
        message.chat.id,
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=admin_keyboard()
    )

def handle_admin_stats(bot, message):
    db = Database()
    conn = db.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM users")
    users_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM products")
    products_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM reviews")
    reviews_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT AVG(rating) FROM reviews")
    avg_rating = cursor.fetchone()[0]
    avg_rating = round(avg_rating, 1) if avg_rating else 0
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {users_count}\n"
        f"üõç –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {products_count}\n"
        f"üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {reviews_count}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}/5"
    )
    
    bot.send_message(
        message.chat.id,
        stats_text,
        parse_mode='HTML'
    )

def start_adding_product(bot, message):
    user_id = message.from_user.id
    user_states[user_id] = UserState.ADMIN_ADDING_PRODUCT_NAME
    user_temp_data[user_id] = {}
    
    bot.send_message(
        message.chat.id,
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )

def handle_admin_product_name(bot, message):
    user_id = message.from_user.id
    user_temp_data[user_id]['name'] = message.text
    user_states[user_id] = UserState.ADMIN_ADDING_PRODUCT_CATEGORY
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for category in config.SHOE_CATEGORIES:
        keyboard.add(types.KeyboardButton(category))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=keyboard
    )

def handle_admin_product_category(bot, message):
    user_id = message.from_user.id
    category = message.text
    
    if category not in config.SHOE_CATEGORIES:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        return
    
    user_temp_data[user_id]['category'] = category
    user_states[user_id] = UserState.ADMIN_ADDING_PRODUCT_DESCRIPTION
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )

def handle_admin_product_description(bot, message):
    user_id = message.from_user.id
    user_temp_data[user_id]['description'] = message.text
    user_states[user_id] = UserState.ADMIN_ADDING_PRODUCT_PRICE
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )

def handle_admin_product_price(bot, message):
    user_id = message.from_user.id
    price_text = message.text
    
    try:
        price = float(price_text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        user_temp_data[user_id]['price'] = price
        user_states[user_id] = UserState.ADMIN_ADDING_PRODUCT_IMAGE
        
        bot.send_message(
            message.chat.id,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç):"
        )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)."
        )

def handle_admin_product_image(bot, message):
    user_id = message.from_user.id
    image_url = message.text
    db = Database()
    
    if image_url.lower() == '–Ω–µ—Ç':
        image_url = None
    
    user_temp_data[user_id]['image_url'] = image_url
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    product_data = user_temp_data[user_id]
    db.add_product(
        product_data['name'],
        product_data['category'],
        product_data['description'],
        product_data['price'],
        product_data['image_url']
    )
    
    user_states[user_id] = UserState.MAIN
    
    bot.send_message(
        message.chat.id,
        "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!",
        reply_markup=admin_keyboard()
    )

def handle_admin_reviews(bot, message):
    db = Database()
    reviews = db.get_reviews(10)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
    
    if not reviews:
        bot.send_message(
            message.chat.id,
            "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        )
        return
    
    for review in reviews:
        review_id, first_name, last_name, rating, text, date = review
        stars = "‚≠ê" * rating
        
        review_text = (
            f"<b>–û—Ç–∑—ã–≤ #{review_id}</b>\n"
            f"–û—Ç: {first_name} {last_name}\n"
            f"–û—Ü–µ–Ω–∫–∞: {stars} ({rating}/5)\n"
            f"–î–∞—Ç–∞: {date}\n\n"
            f"{text}"
        )
        
        bot.send_message(
            message.chat.id,
            review_text,
            parse_mode='HTML'
        )

def start_broadcast(bot, message):
    user_id = message.from_user.id
    user_states[user_id] = UserState.ADMIN_SENDING_BROADCAST
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    )

def handle_admin_broadcast(bot, message):
    user_id = message.from_user.id
    broadcast_text = message.text
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    
    sent_count = 0
    for user in users:
        try:
            bot.send_message(
                user[0],
                f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—É–≤–∏</b>\n\n{broadcast_text}",
                parse_mode='HTML'
            )
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    
    user_states[user_id] = UserState.MAIN
    
    bot.send_message(
        message.chat.id,
        f"–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=admin_keyboard()
    )

